service: dynamodb-message

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  profile: hugy
  role: ${self:custom.role}
  region: ap-northeast-1

# Custom Setting
custom:
  defaultStage: dev
  role: arn:aws:iam::335326279392:role/lambda_basic_execution
  dynamodb:
    provisioned-capacity-unit:
      read:
        default: 2
      write:
        default: 1
    auto-scaling:
      read:
        target-utilization: 75.0
        min: 2
        max: 1000
      write:
        target-utilization: 75.0
        min: 1
        max: 500



# Related AWS resources.
resources: # CloudFormation template syntax
  Resources:
    DynamoDBTableMessage:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: message-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: from_id
            AttributeType: S
          - AttributeName: to_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodb.provisioned-capacity-unit.read.default}
          WriteCapacityUnits: ${self:custom.dynamodb.provisioned-capacity-unit.write.default}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: message-byfrom-${self:provider.stage}
            KeySchema:
              - AttributeName: from_id
                KeyType: HASH
              - AttributeName: to_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.dynamodb.provisioned-capacity-unit.read.default}
              WriteCapacityUnits: ${self:custom.dynamodb.provisioned-capacity-unit.write.default}
          - IndexName: message-byto-${self:provider.stage}
            KeySchema:
              - AttributeName: to_id
                KeyType: HASH
              - AttributeName: from_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.dynamodb.provisioned-capacity-unit.read.default}
              WriteCapacityUnits: ${self:custom.dynamodb.provisioned-capacity-unit.write.default}

    # AutoScaling setting for Message.
    TableReadCapacityScalableMessage:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
        MaxCapacity: ${self:custom.dynamodb.auto-scaling.read.max}
        MinCapacity: ${self:custom.dynamodb.auto-scaling.read.min}
        ResourceId:
          Fn::Join:
            - /
            - - table
              - Ref: DynamoDBTableMessage
        RoleARN: arn:aws:iam::335326279392:role/meeter_dynamo_auto_scaling # 事前作成済み
        ScalableDimension: dynamodb:table:ReadCapacityUnits
        ServiceNamespace: dynamodb
    TableReadCapacityScalingPolicyMessage:
      Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: TableReadScalingPolicyMessage
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: TableReadCapacityScalableMessage
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          TargetValue: ${self:custom.dynamodb.auto-scaling.read.target-utilization}
    TableWriteCapacityScalableMessage:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
        MaxCapacity: ${self:custom.dynamodb.auto-scaling.write.max}
        MinCapacity: ${self:custom.dynamodb.auto-scaling.write.min}
        ResourceId:
          Fn::Join:
            - /
            - - table
              - Ref: DynamoDBTableMessage
        RoleARN: arn:aws:iam::335326279392:role/meeter_dynamo_auto_scaling # 事前作成済み
        ScalableDimension: dynamodb:table:WriteCapacityUnits
        ServiceNamespace: dynamodb
    TableWriteCapacityScalingPolicyMessage:
      Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: TableWriteScalingPolicyMessage
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: TableWriteCapacityScalableMessage
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          TargetValue: ${self:custom.dynamodb.auto-scaling.write.target-utilization}
    GSIMessageByFromReadCapacityScalableMessage:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
        MaxCapacity: ${self:custom.dynamodb.auto-scaling.read.max}
        MinCapacity: ${self:custom.dynamodb.auto-scaling.read.min}
        ResourceId:
          Fn::Join:
            - /
            - - table
              - Ref: DynamoDBTableMessage
              - index
              - message-byfrom-${self:provider.stage}
        RoleARN: arn:aws:iam::335326279392:role/meeter_dynamo_auto_scaling # 事前作成済み
        ScalableDimension: dynamodb:index:ReadCapacityUnits
        ServiceNamespace: dynamodb
    GSIMessageByFromReadCapacityScalingPolicyMessage:
      Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: GSIMessageByFromReadScalingPolicyMessage
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: GSIMessageByFromReadCapacityScalableMessage
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          TargetValue: ${self:custom.dynamodb.auto-scaling.read.target-utilization}
    GSIMessageByFromWriteCapacityScalableMessage:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
        MaxCapacity: ${self:custom.dynamodb.auto-scaling.write.max}
        MinCapacity: ${self:custom.dynamodb.auto-scaling.write.min}
        ResourceId:
          Fn::Join:
            - /
            - - table
              - Ref: DynamoDBTableMessage
              - index
              - message-byfrom-${self:provider.stage}
        RoleARN: arn:aws:iam::335326279392:role/meeter_dynamo_auto_scaling # 事前作成済み
        ScalableDimension: dynamodb:index:WriteCapacityUnits
        ServiceNamespace: dynamodb
    GSIMessageByFromWriteCapacityScalingPolicyMessage:
      Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: GSIMessageByFromWriteScalingPolicyMessage
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: GSIMessageByFromWriteCapacityScalableMessage
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          TargetValue: ${self:custom.dynamodb.auto-scaling.write.target-utilization}


    GSIMessageByToReadCapacityScalableMessage:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
        MaxCapacity: ${self:custom.dynamodb.auto-scaling.read.max}
        MinCapacity: ${self:custom.dynamodb.auto-scaling.read.min}
        ResourceId:
          Fn::Join:
            - /
            - - table
              - Ref: DynamoDBTableMessage
              - index
              - message-byto-${self:provider.stage}
        RoleARN: arn:aws:iam::335326279392:role/meeter_dynamo_auto_scaling # 事前作成済み
        ScalableDimension: dynamodb:index:ReadCapacityUnits
        ServiceNamespace: dynamodb
    GSIMessageByToReadCapacityScalingPolicyMessage:
      Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: GSIMessageByToReadScalingPolicyMessage
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: GSIMessageByToReadCapacityScalableMessage
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          TargetValue: ${self:custom.dynamodb.auto-scaling.read.target-utilization}
    GSIMessageByToWriteCapacityScalableMessage:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
        MaxCapacity: ${self:custom.dynamodb.auto-scaling.write.max}
        MinCapacity: ${self:custom.dynamodb.auto-scaling.write.min}
        ResourceId:
          Fn::Join:
            - /
            - - table
              - Ref: DynamoDBTableMessage
              - index
              - message-byto-${self:provider.stage}
        RoleARN: arn:aws:iam::335326279392:role/meeter_dynamo_auto_scaling # 事前作成済み
        ScalableDimension: dynamodb:index:WriteCapacityUnits
        ServiceNamespace: dynamodb
    GSIMessageByToWriteCapacityScalingPolicyMessage:
      Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: GSIMessageByToWriteScalingPolicyMessage
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: GSIMessageByToWriteCapacityScalableMessage
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          TargetValue: ${self:custom.dynamodb.auto-scaling.write.target-utilization}
