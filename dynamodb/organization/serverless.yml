service: dynamodb-organization

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  profile: hugy
  role: ${self:custom.role}
  region: ap-northeast-1

# Custom Setting
custom:
  defaultStage: dev
  role: arn:aws:iam::335326279392:role/lambda_basic_execution
  dynamodb:
    provisioned-capacity-unit:
      read:
        default: 2
      write:
        default: 1
    auto-scaling:
      read:
        target-utilization: 75.0
        min: 2
        max: 1000
      write:
        target-utilization: 75.0
        min: 1
        max: 500



# Related AWS resources.
resources: # CloudFormation template syntax
  Resources:
    DynamoDBTableOrganization:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: organization-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodb.provisioned-capacity-unit.read.default}
          WriteCapacityUnits: ${self:custom.dynamodb.provisioned-capacity-unit.write.default}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # AutoScaling setting for organization.
    TableReadCapacityScalableOrganization:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
        MaxCapacity: ${self:custom.dynamodb.auto-scaling.read.max}
        MinCapacity: ${self:custom.dynamodb.auto-scaling.read.min}
        ResourceId:
          Fn::Join:
            - /
            - - table
              - Ref: DynamoDBTableOrganization
        RoleARN: arn:aws:iam::335326279392:role/meeter_dynamo_auto_scaling # 事前作成済み
        ScalableDimension: dynamodb:table:ReadCapacityUnits
        ServiceNamespace: dynamodb
    TableReadCapacityScalingPolicyOrganization:
      Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: TableReadScalingPolicyOrganization
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: TableReadCapacityScalableOrganization
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          TargetValue: ${self:custom.dynamodb.auto-scaling.read.target-utilization}
    TableWriteCapacityScalableOrganization:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
        MaxCapacity: ${self:custom.dynamodb.auto-scaling.write.max}
        MinCapacity: ${self:custom.dynamodb.auto-scaling.write.min}
        ResourceId:
          Fn::Join:
            - /
            - - table
              - Ref: DynamoDBTableOrganization
        RoleARN: arn:aws:iam::335326279392:role/meeter_dynamo_auto_scaling # 事前作成済み
        ScalableDimension: dynamodb:table:WriteCapacityUnits
        ServiceNamespace: dynamodb
    TableWriteCapacityScalingPolicyUOrganization:
      Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: TableWriteScalingPolicyOrganization
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: TableWriteCapacityScalableOrganization
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          TargetValue: ${self:custom.dynamodb.auto-scaling.write.target-utilization}

  Outputs:
    DynamoDBStreamOrganization:
      Description: DynamoDB Stream ARN of Organization.
      Value:
        Fn::GetAtt:
          - DynamoDBTableOrganization
          - StreamArn
      Export:
        Name: dynamodb-${self:provider.stage}-DynamoDBStreamOrganization
